const TelegramApi = require('node-telegram-bot-api')

const token = ''

const bot = new TelegramApi(token, {polling: true})

let arr = new Array();
arr = ["Инцидентность вершин и рёбер ", " Смежность вершин и рёбер", "Ребро, кратные рёбра, петля ", "Изолированная вершина, висячая вершина и висячее ребро", " Простой граф, ориентированный граф","Мультиграф, псевдограф","Взвешенный, направленный граф","Нуль граф, пустой граф, тривиальный граф","Изоморфизм графов, помеченный граф","Способы представления графа","Описание кратных рёбер и петель в матрице смежности","Описание кратных рёбер и петель в матрице инцидентности","Ребро, ориентированное ребро, петля, кратное ребро","Степень вершины в графе (ориентированном и\n" +
"неориентированном)","Лемма о рукопожатиях для неориентированного графа","Лемма о рукопожатиях для ориентированного графа","Подграф","Надграф","Собственный подграф, несобственный подграф","Частичный граф",".Регулярный (однородный) граф, полный граф","Дополнение, объединение, пересечение графов","Путь, цепь, простая цепь","Замкнутый путь, цикл и простой цикл","Двудольный граф, критерий двудольности","Вершинно простой путь, рёберно простой путь","Лемма о простом пути","Связность в неориентированном графе, компоненты связности, \n" +
"связный граф","Слабая связность, компоненты слабой связности, слабо связный граф","Сильная связность, компоненты сильной связности, сильно связный граф", "Рёберная двусвязность, компоненты рёберной двусвязности,минимальная компонента","Разрезающее множество, разрез","Мост (определение + 2 эквивалентных определения на выбор)","Лемма о цикле и мосте","Лемма про удаление моста", "Вершинная двусвязность, компоненты вершинной двусвязности,минимальная компонента" , "Блок (определение через неразделимый граф + 1 из эквивалентных определений на выбор)","Точка сочленения (2 эквивалентных определения) ", "Лемма о точке сочленения","Эксцентриситет","Радиус, диаметр и центр","Планарный граф" ];

let ponarr = new Array();
ponarr = ["Есть ребро , которое соединяет вершины между собой. Тогда вершины\n" +
"инцидентны ребру и ребро инцидентно вершинам ."
    , "Есть ребро , которое соединяет вершины между собой. Тогда вершины , \n" +
    "соединённые ребром , называются смежными друг другу;\n" +
    "Смежными между собой называются рёбра, если они имеют общую вершину."
    , " Ребро - пара (два элемента и оба вершины) из подмножества (упорядоченная для\n" +
    "ориентированного графа и неупорядоченная для неориентированного).\n" +
    "Кратные (параллельные) рёбра - несколько рёбер, соединяющих одни и те же\n" +
    "вершины между собой.\n" +
    "Петля - ребро, соединяющее вершину саму с собой."
    , "Изолированная вершина - вершина, которая не имеет инцидентных ей рёбер\n" +
    "(степень вершины 0, петель тоже нет).\n" +
    "Висячая (концевая) вершина - вершина инцидентная только одному ребру или в\n" +
    "которую ведёт только одно ребро. Такое ребро также называется висячим\n" +
    "(концевым).", "Простой граф - граф без петель и кратных рёбер.\n" +
    "Ориентированный граф - граф, множество рёбер которого состоит из\n" +
    "упорядоченных пар вершин - ориентированных рёбер (которые называются дугами)","Псевдограф - граф с кратными рёбрами и петлями (могут также быть кратными).\n" +
    "Мультиграф - псевдограф без петель (граф с кратными рёбрами и без петель).","Взвешенный граф - граф с весами на рёбрах (каждое ребро имеет свой вес/\n" +
    "значение).\n" +
    "Направленный граф - ориентированный граф, не имеющий симметричных ( и\n" +
    ") пар ориентированных рёбер (дуг).","Нуль граф - граф без рёбер.\n" +
    "Пустой граф - граф без вершин.\n" +
    "Тривиальный граф - граф из одной вершины (без рёбер).","Помеченный (перенумерованный) граф - граф, в котором вершины отличаются\n" +
    "друг от друга пометками.\n" +
    "Графы и изоморфны, если между их множествами вершин существует взаимнооднозначное соответствие с сохранением смежности.\n" +
    "Графы изоморфны, если можно перенумеровать вершины и все связи будут такими\n" +
    "же.","Диаграмма\n" +
    "Список смежности\n" +
    "Матрица смежности\n" +
    "Матрица инцидентности","Орграфы кратные рёбра: \n" +
    "кол-во кратных рёбер на \n" +
    "пересечении строки и столбца\n" +
    "петли: \n" +
    "учитываются единожды  " +
    "Неориентированные  кратные рёбра:\n" +
    "кол-во кратных рёбер на \n" +
    "пересечении строки и столбца\n" +
    "петли: \n" +
    "учитываются дважды\n","Кратные рёбра: добавляется новый столбец в матрицу для каждого кратного\n" +
    "ребра;\n" +
    "Петли: и в ориентированном, и неориентированном графе используется 2 вместо 1 \n" +
    "или -1.","Ребро - пара (два элемента и оба вершины) из подмножества (упорядоченная для\n" +
    "ориентированного графа и неупорядоченная для неориентированного).\n" +
    "Ориентированное ребро - упорядоченная пара вершин из подмножества .\n" +
    "Кратные (параллельные) рёбра - несколько рёбер, соединяющих одни и те же\n" +
    "вершины между собой.\n" +
    "Петля - ребро, соединяющее вершину саму с собой"," Ориентированные степень входа- сколько дуг входит в вершину, Степень исхода - сколько дуг выходит из вершины. Неориентирванные  Степень вершины - число инцидентных ребер",
    "Сумма степеней всех вершин равна удвоенному числу рёбер", "Сумма входящих и исходящих степеней всех вершин - чётное число, равное\n" +
    "удвоенному числу дуг графа.", "Подграф - граф, полученный в результате удаления из графа нескольких вершин и\n" +
    "инцидентных им рёбер.","Надграф - граф, полученный путём добавления новых вершин и соединением их\n" +
    "рёбрами с остальным графом.", "Собственный подграф - непустой или несовпадающий с исходным графом.\n" +
    "Несобственный подграф - пустой или совпадающий с исходным графом.", "Частичный граф - граф, полученный путём удаления из заданного графа\n" +
    "нескольких рёбер (всякий граф частичен сам себе). \n" +
    "Состоит из множества вершин исходного графа и подмножества множества рёбер.","Регулярный (однородный) граф - граф, в котором степени всех его вершин\n" +
    "равны. Полный граф -Простой неориентированный граф, в котором каждая пара различных вершин смежна.к","Дополнение графа до полного - добавление в исходный граф рёбер до полного и\n" +
    "удаление рёбер исходного.\n" +
    "Объединение графов   - граф, полученный путём объединения\n" +
    "множеств вершин и рёбер этих графов.\n" +
    "Пересечение графов  - граф, полученный путём пересечения\n" +
    "множеств вершин и рёбер этих графов", "Путь (маршрут) - последовательность вершин и рёбер.\n" +
    "Цепь - путь без повторяющихся рёбер (рёберно простой путь).\n" +
    "Простая цепь - цепь без повторяющихся вершин (путь без повторяющихся вершин\n" +
    "и рёбер)", "Замкнутый путь - путь, у которого начало и конец совпадают (путь, \n" +
    "начинающийся и заканчивающийся в одной и той же вершине).\n" +
    "Цикл - замкнутая цепь.\n" +
    "Простой цикл - замкнутая простая цепь.","Двудольный граф - граф, множество вершин которого можно разделить на два\n" +
    "непересекающихся множества (доли) так, что никакие две вершины из одной доли не\n" +
    "являются смежными. \n" +
    "Критерий двудольности: в графе отсутствуют циклы нечётной длины.", "Вершинно простой путь - путь, в котором каждая вершина встречается не более\n" +
    "одного раза.\n" +
    "Рёберно простой путь - путь, в котором каждое ребро встречается не более одного\n" +
    "раза (цепь). ","Если между двумя вершинами существует путь, то между ними существует и\n" +
    "простая цепь.","Вершины и связаны, если в графе существует путь из в .\n" +
    "Компонента связности - максимальный связный подграф исходного графа\n" +
    "(подмножество вершин такое, что из каждой вершины есть путь в любую другую).\n" +
    "Компонента связности - класс эквивалентности относительно связности.\n" +
    "Минимальная компонента связности - вершина.\n" +
    "Связный граф - граф, состоящий из одной компоненты связности.", "Вершины и слабо связаны, если в неориентированной версии графа между\n" +
    "ними существует путь.\n" +
    "Компонента слабой связности - максимальный слабо связный подграф исходного\n" +
    "графа.\n" +
    "Ориентированный граф называется слабо связным, если в его неориентированной\n" +
    "версии из каждой вершины графа есть путь в любую другую", "Вершины и сильно связаны, если есть путь из в и из в (есть путь из одной\n" +
    "вершины в другую и обратно).\n" +
    "Компоненты сильной связности - классы эквивалентности относительно\n" +
    "сильной связности.\n" +
    "Ориентированный граф называется сильно связным, если состоит из одной\n" +
    "компоненты сильной связности.","Вершины и графа называются рёберно двусвязными, если между ними\n" +
    "существуют два рёберно не пересекающихся пути.\n" +
    "Отношения рёберной двусвязности - отношения эквивалентности на\n" +
    "вершинах.\n" +
    "Компонентами рёберной двусвязности графа называют его подграфы, \n" +
    "множества вершин которых - классы эквивалентности рёберной двусвязности, а\n" +
    "множества рёбер - множества рёбер из соответствующих классов эквивалентности.\n" +
    "По компонентам рёберной двусвязности граф разбивается мостами.\n" +
    "Минимальная компонента рёберной двусвязности - вершина.","Разрезающее множество - множество рёбер графа, при удалении которых число\n" +
    "компонент связности увеличивается.\n" +
    "Разрез - разрезающее множество с минимальным числом рёбер.","Мост:\n" +
    "ребро, при удалении которого граф становится несвязным;\n" +
    "ребро, соединяющее две компоненты рёберной двусвязности;\n" +
    "ребро, составляющее одноэлементный разрез.","Ребро графа является мостом только если оно не содержится ни в одном цикле.","При удалении моста число компонент связности увеличивается на единицу.","Ребра и графа называются вершинно двусвязными, если между их концами\n" +
    "существуют два вершинно не пересекающихся пути.\n" +
    "Отношения вершинной двусвязности - отношения эквивалентности на\n" +
    "рёбрах.\n" +
    "Блоками, или компонентами вершинной двусвязности графа, называют\n" +
    "его подграфы, множества рёбер которых - классы эквивалентности вершинной\n" +
    "двусвязности, а множества вершин - множества всевозможных концов рёбер из\n" +
    "соответствующих классов.\n" +
    "По компонентам вершинной двусвязности граф разбивается точками сочленения.\n" +
    "Минимальная компонента вершинной двусвязности - ребро.","Связный граф неразделим, если не содержит точек сочленения.\n" +
    "Блок:\n" +
    "максимально неразделимый подграф;\n" +
    "компонента вершинной двусвязности графа - подграф, множество рёбер которого - \n" +
    "класс эквивалентности вершинной двусвязности, а множество вершин - множество\n" +
    "всевозможных концов рёбер из соответствующего класса.","Точка сочленения:\n" +
    "вершина, при удалении которой в графе увеличивается число компонент\n" +
    "связности;\n" +
    "вершина, принадлежащая как минимум двум блокам графа.","Любые два блока связного графа имеют не больше одной общей вершины.","Расстоянием между вершинами и называется число , равное длине\n" +
    "кратчайшей цепи, соединяющей вершины и .\n" +
    "Эксцентриситетом вершины называется число , равное максимальному\n" +
    "расстоянию от вершины до остальных вершин графа","Радиусом графа называется число , равное минимальному эксцентриситету\n" +
    "его вершин, т.е. .\n" +
    "Диаметром графа называется число , равное максимальному эксцентриситету\n" +
    "его вершин, т.е. .\n" +
    "Центр - множество вершин графа, имеющих минимальный эксцентриситет (вершины\n" +
    "центра равноудалены от всех остальных вершин).","Планарный граф - граф, имеющий укладку без пересекающихся рёбер"];

const againOptions = {
    reply_markup: JSON.stringify({
                                     inline_keyboard: [
                                         [{text: 'Проверка', callback_data: 'post'}], [{text: 'Далее', callback_data: 'next'}],
                                     ]
                                 })

}

let count = 0;
let number;

const start = () => {
    bot.setMyCommands([
        {command: '/start', description: 'Что я умею'},
        {command: '/stop', description: 'Я устал'},
        {command: '/go', description: 'Давай начнем'},
    ])
    bot.on('message', async msg => {
        const text = msg.text;
        const chatId = msg.chat.id;

        if (text === '/start') {
            return bot.sendMessage(chatId, 'В начале тебе дается определение и ты должен рассказать мне его \n' +
                'Запиши голосовое и проверь правильность определения \n ' +
                'И в конце запусти бота снова /go');
        }

        if (text === '/stop') {
            return bot.sendMessage(chatId, 'До новых встреч ');
        }

        if (text === '/go') {
            await bot.sendMessage(chatId, 'Итак, начнем');
            const randomNum = Math.floor(Math.random() * 100 % 41);
            await bot.sendMessage(chatId, arr[randomNum]);
            number = randomNum;
           // bot.options.timeout(5);
           // await bot.sendMessage(chatId, ponarr[randomNum]);
            //return bot.sendMessage(chatId, count);

        }
        else {
            bot.sendMessage(chatId, 'OK');
            return   bot.sendMessage(chatId, ponarr[number]);
        }


    });
}


start();

bot.on( 'callback',async msg =>{
                const data = msg.text;
                const chatId = msg.message.chat.id;
                count = 0;

                if(data === 'post'){
                    flag = false;
                    return bot.sendMessage(chatId,ponarr[number] );
                }


            })
